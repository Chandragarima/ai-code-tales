// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pzbgcmzgbyodjtptdnbc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InB6YmdjbXpnYnlvZGp0cHRkbmJjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2MjQ2NjksImV4cCI6MjA2ODIwMDY2OX0.Z9jBQVJXuobCqvQEZYiiM7kmQONPFBMEAkYEokQApO4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  realtime: {
    // Enable realtime with controlled parameters for messaging
    params: {
      eventsPerSecond: 10, // Limit to reduce connection issues
      heartbeatIntervalMs: 30000,
      reconnectIntervalMs: 5000
    }
  },
  global: {
    fetch: (url, options = {}) => {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000); // Reduced to 5 seconds
      
      return fetch(url, {
        ...options,
        signal: controller.signal,
      }).finally(() => clearTimeout(timeoutId));
    },
  },
});

// Connection health check function
export const testSupabaseConnection = async () => {
  try {
    console.log('üîç Testing Supabase connection...');
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    console.log('‚úÖ Supabase connection test result:', { data, error });
    return { success: !error, error };
  } catch (error) {
    console.error('‚ùå Supabase connection test failed:', error);
    return { success: false, error };
  }
};